// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}



@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);
  
  @if $type == string {

    @if $min == xxxs-max {
      @media (max-width: 350px) { @content; }
    }

    @else if $min == xxs-max {
      @media (max-width: 479px) { @content; }
    }

    @else if $min == xxs-min{
      @media (min-width: 480px) { @content; }
    }

    @else if $min == xs { 
      @media (max-width: 767px) { @content; }       // Mobile Devices
    }

    @else if $min == sm {
      @media (min-width: 768px) { @content; }       // Tablet Devices
    }

    @else if $min == sm-max{
      @media (max-width: 991px) { @content; }
    }
    
    @else if $min == md {
      @media (min-width: 992px) { @content; }       // Desktops
    }

    @else if $min == md-max{
    @media (max-width: 1199px) { @content; }
    }
    
    @else if $min == lg {
      @media (min-width: 1200px) { @content; }      // Widescreen Desktops
    }

    @else if $min == xlg {
      @media (min-width: 1400px) { @content; }
    }

    @else if $min == rxlg {
      @media (min-width: 1400px) and (-webkit-min-device-pixel-ratio: 2) { @content; }
    }
  
    // Otherwise pass a warning to the compiler as to the appropriate options
    @else {
      @warn "The breakpoint mixin supports the following attributes: xxs-max, xxs-min, xs, sm, sm-max, md, md-max, lg, xlg";
    }

  } @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;
    @if      $min != 0 and $max != 0 { $query: "(min-width: #{$min}) and (max-width: #{$max})"; } // set both min and max
    @else if $min != 0 and $max == 0 { $query: "(min-width: #{$min})"; } // set just min
    @else if $min == 0 and $max != 0 { $query: "(max-width: #{$max})"; } // set just max
    @media #{$query} { @content; }
  }
}


@mixin bg_images($path, $ext : 'jpg'){
  background-image: url(#{$path}-xs.#{$ext});
@include breakpoint(sm) {
  background-image: url(#{$path}-lg.#{$ext});
}
@include breakpoint(lg) {
  background-image: url(#{$path}-xl.#{$ext});
}
}

@mixin bg_full_images($path, $ext : 'jpg'){
  background-image: url(#{$path}_XS.#{$ext});
@include breakpoint(sm) {
  background-image: url(#{$path}_LG.#{$ext});
}
@include breakpoint(lg) {
  background-image: url(#{$path}_XL.#{$ext});
}
}
@mixin bg_tablet_images($path, $ext : 'jpg'){
  background-image: url(#{$path}_XS.#{$ext});
@include breakpoint(sm) {
  background-image: url(#{$path}_LG.#{$ext});
}
}



// generic transform
@mixin transform($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}
// rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}
 
// scale
@mixin scale($scale) {
   @include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
       -o-transform-origin: $origin;
      -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
          transform-origin: $origin;
}


@mixin transition-duration($duration: 0.2s) {
    -moz-transition-duration: $duration;
    -webkit-transition-duration: $duration;
    -o-transition-duration: $duration;
  -ms-transition-duration: $duration;
    transition-duration: $duration;
}
@mixin transition-timing($ease: ease) {
    -webkit-transition-timing-function: $ease;
    -webkit-transition-timing-function: $ease;
    -o-transition-timing-function: $ease;
  -ms-transition-timing-function: $ease;
    transition-timing-function: $ease;
}
@mixin transition-property($property: all) {
    -webkit-transition-property: $property;
    -webkit-transition-property: $property;
    -o-transition-property: $property;
  -ms-transition-property: $property;
    transition-property: $property;
}
@mixin transition-delay($delay: all) {
    -webkit-transition-delay: $delay;
    -webkit-transition-delay: $delay;
    -o-transition-delay: $delay;
  -ms-transition-delay: $delay;
    transition-delay: $delay;
}
@mixin transition-none{
    -moz-transition-property: none;
    -webkit-transition-property: none;
    -o-transition-property: none;
  -ms-transition-property: none;
    transition-property: none;
}
@mixin transition($property:all, $duration:0.2s, $ease:ease-out, $delay: 0s) {
    @include transition-property($property);
    @include transition-duration($duration);
    @include transition-timing($ease);
    @include transition-delay($delay);
}


// Usage:   @include transition(width, height 0.3s ease-in-out);
// Output:  -webkit-transition(width 0.2s, height 0.3s ease-in-out);
//          transition(width 0.2s, height 0.3s ease-in-out);
//
// Pass in any number of transitions
@mixin transition($transitions...) {
  $unfoldedTransitions: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
  }
  
  -webkit-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
}

@function unfoldTransition ($transition) {
  // Default values
  $property: all;
  $duration: .2s;
  $easing: null; // Browser default is ease, which is what we want
  $delay: null; // Browser default is 0, which is what we want
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i)
    } @else {
      $p: nth($defaultProperties, $i)
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}


@mixin txt-limit($length){
  max-width:$length;
  margin-left:auto;
  margin-right:auto;
}

// Gradients



// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12
  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
  background-repeat: repeat-x;
  background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient($deg, $start-color, $end-color); // Opera 12
  background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
}
@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: -o-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: -o-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
  background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: -o-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}

/* Animation */

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}


@mixin animation-name($name){
    -webkit-animation-name: $name;
    -moz-animation-name: $name;
    animation-name: $name;
}
@mixin animation-duration($duration:1s){
    -webkit-animation-duration: $duration;
    -moz-animation-duration: $duration;
    animation-duration: $duration;
}
@mixin animation-iteration($count:1){
    -webkit-animation-iteration-count: $count;
    -moz-animation-iteration-count: $count;
    animation-iteration-count: $count;
}
@mixin animation-timing($timing:linear) {
    -webkit-animation-timing-function: $timing;
    -moz-animation-timing-function: $timing;
    animation-timing-function: $timing;
}
@mixin animation-direction($direction:alternate) {
    -webkit-animation-direction: $direction;
    -moz-animation-direction: $direction;
    animation-direction: $direction;
}
@mixin animation-delay($delay:0s) {
    -webkit-animation-delay: $delay;
    -moz-animation-delay: $delay;
    animation-delay: $delay;
}
@mixin animation-fill-mode($type: none){
  -webkit-animation-fill-mode: $type;
    -moz-animation-fill-mode: $type;
    animation-fill-mode: $type;
}
@mixin animation($name,$duration:1s,$count:1,$timing:linear,$direction:alternate,$delay:0s, $fill_mode: none) {
    @include animation-name($name);
    @include animation-duration($duration);
    @include animation-iteration($count);
    @include animation-timing($timing);
    @include animation-direction($direction);
    @include animation-delay($delay);
  @include animation-fill-mode($fill_mode);
}


@mixin rotated-text($num-letters: 100, $angle-span: 180deg, $angle-offset: 0deg) {
  $angle-per-char: $angle-span / $num-letters;
  @for $i from 1 through $num-letters {
    .char#{$i} {
      @include transform(rotate($angle-offset + $angle-per-char * $i))
    }
  }
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}
